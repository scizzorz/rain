program :: (stmt NEWLINE)+ EOF

block :: INDENT (stmt NEWLINE)+ DEDENT

stmt :: 'bind' NAME (',' NAME)*
      | 'break' ('if' binexpr)?
      | 'continue' ('if' binexpr)?
      | 'for' var_prefix 'in' binexpr block
      | if_stmt
      | 'loop' block
      | 'pass'
      | 'return' compound?
      | 'save' (NAME '=')? compound
      | 'var' var_prefix ('=' compound)?
      | 'while' binexpr block
      | assn_prefix ('=' compound | fnargs | ':' NAME  fnargs)

if_stmt :: 'if' binexpr block (NEWLINE 'else' (if_stmt | block))?

var_prefix :: '[' var_prefix (',' var_prefix)* ']'
            | NAME

assn_prefix :: '[' assn_prefix (',' assn_prefix)* ']'
             | prefix ('.' NAME | '[' binexpr ']')*

array_expr :: '[' (binexpr (',' binexpr)*)? ','? ']'

dict_item :: ((NAME | '[' binexpr ']') '=' binexpr)

dict_expr :: '{' (dict_item (',' dict_item)*)? ','? '}'

fnargs :: '(' (binexpr (',' binexpr)*)? ')'

fnparams :: '(' (NAME (',' NAME)*)? ')'

compound :: 'func' fnparams ('->' binexpr | block)
          | 'catch' block
          | binexpr

binexpr :: unexpr (OPERATOR unexpr)*

unexpr :: ('-' | '!') unexpr
        | simple

simple :: 'func' fnparams '->' binexpr
        | array_expr
        | dict_expr
        | primary

primary :: prefix ('?'? fnargs | ':' NAME '?'? fnargs | '.' NAME | '[' binexpr ']')*

prefix :: '(' binexpr ')'
        | NAME | INT | FLOAT | BOOL | STRING | NULL | (TABLE dict_expr?)
