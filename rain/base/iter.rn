var count_by = func(step)
  var next = 0
  return func()
    bind next, step
    save next
    next = next + step

var count = func() -> count_by(1)

var srange_by = func(start, end, step)
  var next = start
  return func()
    bind next, end, step
    if next < end
      save next
    next = next + step

var srange = func(start, end) -> srange_by(start, end, 1)

var range = func(end) -> srange_by(0, end, 1)

var map = func(iter, fn)
  return func()
    bind iter, fn
    var val = iter()
    if val != null
      return fn(val)

var foldl = func(iter, fn, z)
  var a = z
  for v in iter
    a = fn(a, v)
  return a

var map_success = func(iter, f)
  return func ()
    bind iter, f
    var a = iter()
    while a != null
      a = f(a)
      if a != null
        return a
      a = iter()

var filter = func(iter, f)
  var test = func(a)
    bind f
    return f(a) & a | null

  return map_success(iter, test)

var enum = func(iter)
  var i = 0
  return func()
    bind i, iter
    var next = iter()
    if next == null
      return

    save [i, next]
    i = i + 1

var zip = func(one, two)
  return func()
    bind one, two
    var n1 = one()
    var n2 = two()
    if n1 == null | n2 == null
      return

    return [n1, n2]

var zip_with = func(one, two, fn)
  return func()
    bind one, two, fn
    var n1 = one()
    var n2 = two()
    if n1 == null | n2 == null
      return

    return fn(n1, n2)

var take = func(iter, end)
  var next = 0
  return func()
    bind next, iter, end
    if next < end
      save iter()
    next = next + 1

var drop = func(iter, num)
  var i = 0
  while i < num
    iter()
    i = i + 1

  return iter

var repeat = func(val)
  return func()
    bind val
    return val

var replicate = func(times, val)
  return func()
    bind times, val
    if times > 0
      times = times - 1
      return val

var force = func(iter)
  for _ in iter
    pass

exports = {
  count_by = count_by,
  count = count,
  srange_by = srange_by,
  srange = srange,
  range = range,
  map = map,
  foldl = foldl,
  map_success = map_success,
  filter = filter,
  enum = enum,
  zip = zip,
  zip_with = zip_with,
  take = take,
  drop = drop,
  repeat = repeat,
  replicate = replicate,
  force = force,
}
