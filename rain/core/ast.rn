# base

var node = table

node.slots = []
node.new = func(self)
  save ret = table :: self


var value_node = table :: node

value_node.slots = ["value"]
value_node.new = func(self, value)
  save ret = table :: self
  ret.value = value


var pred_block = table :: node

pred_block.slots = ["pred", "body"]
pred_block.new = func(self, pred, body)
  save ret = table :: self
  ret.pred = pred
  ret.body = body

# structure

var _block = table :: node

_block.tag = "block"
_block.slots = ["expr", "stmts"]
_block.new = func(self, stmts, expr)
  save ret = table :: self
  ret.stmts = stmts
  ret.expr = expr

_block.empty = func(self)
  return self:new([], null)

_block.add = func(self, stmt)
  var idx = self.stmts:length()
  self.stmts[idx] = stmt

_block.values = func(self)
  var i = 0
  return func()
    bind i, self
    save self.stmts[i]
    i = i + 1


# statements

var _assn = table :: node

_assn.tag = "assn"
_assn.slots = ["var", "export", "lhs", "rhs"]
_assn._var = false
_assn._export = false
_assn.new = func(self, lhs, rhs)
  save ret = table :: self
  ret.lhs = lhs
  ret.rhs = rhs


var _var = table :: _assn

_var._var = true


var _export = table :: _assn

_export._export = true

export _bind = table :: node

_bind.tag = "bind"
_bind.slots = ["names"]
_bind.new = func(self, names)
  save ret = table :: self
  ret.names = names

var _break = table :: node

_break.tag = "break"
_break.slots = ["cond"]
_break.new = func(self, cond)
  save ret = table :: self
  ret.cond = cond


var _cont = table :: node

_cont.tag = "continue"
_cont.slots = ["cond"]
_cont.new = func(self, cond)
  save ret = table :: self
  ret.cond = cond


var _export_foreign = table :: node

_export_foreign.tag = "exportforeign"
_export_foreign.slots = ["name", "rename"]
_export_foreign.new = func(self, name, rename)
  save ret = table :: self
  ret.name = name
  ret.rename = rename


var _if = table :: node

_if.tag = "if"
_if.slots = ["pred", "body", "els"]
_if.new = func(self, pred, body, els)
  save ret = table :: self
  ret.pred = pred
  ret.body = body
  ret._els = _els


var _import = table :: node

_import.tag = "import"
_import.slots = ["name", "rename"]
_import.new = func(self, name, rename)
  save ret = table :: self
  ret.name = name
  ret.rename = rename


var _link = table :: node

_link.tag = "link"
_link.slots = ["name"]
_link.new = func(self, name)
  save ret = table :: self
  ret.name = name


var _lib = table :: node

_lib.tag = "library"
_lib.slots = ["name"]
_lib.new = func(self, name)
  save ret = table :: self
  ret.name = name


var _loop = table :: node

_loop.tag = "loop"
_loop.slots = ["body"]
_loop.new = func(self, body)
  save ret = table :: self
  ret.body = body


var _for = table :: node

_for.tag = "for"
_for.slots = ["names", "funcs", "body"]
_for.new = func(self, names, funcs, body)
  save ret = table :: self
  ret.names = names
  ret.funcs = funcs
  ret.body = body


var _with = table :: node

_with.tag = "with"
_with.slots = ["expr", "params", "body"]
_with.new = func(self, expr, params, body)
  save ret = table :: self
  ret.expr = expr
  ret.params = params
  ret.body = body


var _pass = table :: node

_pass.tag = "pass"


var _return = table :: value_node

_return.tag = "return"


var _save = table :: value_node

_save.tag = "save"
_save.name = null


var _until = table :: pred_block

_until.tag = "until"


var _while = table :: pred_block

_while.tag = "while"


# expressions

var expression_node = table :: node


var _index = table :: expression_node

_index.tag = "index"
_index.slots = ["lhs", "rhs"]
_index.new = func(self, lhs, rhs)
  save ret = table :: self
  ret.lhs = lhs
  ret.rhs = rhs

_index._assn = func(self, value)
  return _assn:new(self, value)


var _name = table :: expression_node :: value_node

_name.tag = "name"

_name._assn = func(self, value)
  return _assn:new(self, value)

_name._var = func(self, value)
  return _var:new(self, value)

_name._export = func(self, value)
  return _export:new(self, value)


var _null = table :: expression_node

_null.tag = "null"


var _int = table :: expression_node :: value_node

_int.tag = "int"


var _float = table :: expression_node :: value_node

_float.tag = "float"


var _bool = table :: expression_node :: value_node

_bool.tag = "bool"


var _str = table :: expression_node :: value_node

_str.tag = "str"


var _table = table :: expression_node

_table.tag = "table"


var _array = table :: expression_node

_array.tag = "array"
_array.slots = ["items"]
_array.new = func(self, items)
  save ret = table :: self
  self.items = items


var _dict = table :: expression_node

_dict.tag = "dict"
_dict.slots = ["items"]
_dict.new = func(self, items)
  save ret = table :: self
  self.items = items


var _func = table :: expression_node

_func.tag = "func"
_func.slots = ["params", "body", "rename"]
_func.new = func(self, params, body, rename)
  save ret = table :: self
  ret.params = params
  ret.body = body
  ret.rename = rename


var _catch = table :: expression_node

_catch.tag = "catch"
_catch.slots = ["body"]
_catch.new = func(self, body)
  save ret = table :: self
  ret.body = body


var _foreign = table :: expression_node

_foreign.tag = "foreign"
_foreign.slots = ["name", "params"]
_foreign.new = func(self, name, params)
  save ret = table :: self
  ret.name = name
  ret.params = params


var _call = table :: expression_node

_call.tag = "call"
_call._catch = false
_call.slots = ["func", "args", "catch"]
_call.new = func(self, _func, args)
  save ret = table :: self
  ret._func = _func
  ret.args = args


var _catch_call = table :: _call

_catch_call._catch = true


var _method = table :: expression_node

_method.tag = "method"
_method.slots = ["lhs", "rhs", "args", "catch"]
_method.new = func(self, lhs, rhs, args, _catch)
  save ret = table :: self
  ret.lhs = lhs
  ret.rhs = rhs
  ret.args = args
  ret._catch = _catch


var _binary = table :: expression_node

_binary.tag = "binary"
_binary.slots = ["op", "lhs", "rhs"]
_binary.new = func(self, lhs, rhs, op)
  save ret = table :: self
  ret.lhs = lhs
  ret.rhs = rhs
  ret.op = op


var _unary = table :: expression_node

_unary.tag = "unary"
_unary.slots = ["op", "val"]
_unary.new = func(self, op, val)
  save ret = table :: self
  ret.op = op
  ret.val = val


# expression overloads

expression_node.add = func(self, other)
  return _binary:new(self, other, "+")

expression_node.sub = func(self, other)
  return _binary:new(self, other, "-")

expression_node.mul = func(self, other)
  return _binary:new(self, other, "*")

expression_node.div = func(self, other)
  return _binary:new(self, other, "/")

expression_node.concat = func(self, other)
  return _binary:new(self, other, "$")

expression_node.idx = func(self, rhs)
  return _index:new(self, rhs)

expression_node.call = func(self, args)
  return _call:new(self, args)

expression_node._if = func(self, body, els)
  return _if:new(self, body, els)


# message nodes

var _message = table :: node

_message.slots = ["msg"]
_message.new = func(self, msg)
  save ret = table :: self
  ret.msg = msg


var _error = table :: _message

_error.tag = "error"


var _warning = table :: _message

_warning.tag = "warning"


var _hint = table :: _message

_hint.tag = "hint"

var rain = {
  exit   = {value="exit"}   :: _name,
  length = {value="length"} :: _name,
  meta   = {value="meta"}   :: _name,
  panic  = {value="panic"}  :: _name,
  print  = {value="print"}  :: _name,
  tostr  = {value="tostr"}  :: _name,
  type   = {value="type"}   :: _name,
}

var init = func "rain.ast.init"()
  pass


exports = {
  _block = _block,
  _assn = _assn,
  _break = _break,
  _cont = _cont,
  _export_foreign = _export_foreign,
  _if = _if,
  _import = _import,
  _link = _link,
  _lib = _lib,
  _loop = _loop,
  _for = _for,
  _with = _with,
  _pass = _pass,
  _return = _return,
  _save = _save,
  _until = _until,
  _while = _while,
  _index = _index,
  _name = _name,
  _null = _null,
  _int = _int,
  _float = _float,
  _bool = _bool,
  _str = _str,
  _table = _table,
  _array = _array,
  _dict = _dict,
  _func = _func,
  _catch = _catch,
  _foreign = _foreign,
  _call = _call,
  _catch_call = _catch_call,
  _method = _method,
  _binary = _binary,
  _message = _message,
  _error = _error,
  _warning = _warning,
  _hint = _hint,
  rain = rain,
} :: null
