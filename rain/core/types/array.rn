link "./array.c"

var to_str = foreign "rain_ext_to_str"(val)
var meta = foreign "rain_ext_meta"(val)
var length = foreign "rain_ext_array_length"(val)

var values = func(self)
  var i = 0
  return func()
    bind i, self
    save self[i]
    i = i + 1

var keys = func(self)
  var i = 0
  return func()
    bind i, self
    if self[i] == null
      return

    save i
    i = i + 1

var items = func(self)
  var i = 0
  return func()
    bind i, self
    if self[i] == null
      return null

    save [i, self[i]]
    i = i + 1

var map = func(self, fn)
  save ret = table :: meta(self)
  for i in keys(self)
    ret[i] = fn(self[i])

var foldl = func(self, fn, z)
  var a = z
  for v in values(self)
    a = fn(a, v)
  return a

var concat = func(self, other)
  save ret = table :: meta(self)
  for i in keys(self)
    ret[i] = self[i]
  var len = length(self)
  for i in keys(other)
    ret[i+len] = other[i]

var flatmap = func(self, fn)
  var mapped = map(self, fn)
  return foldl(mapped, concat, table :: meta(self))

var contains = func(self, value)
  save false
  for v in values(self)
    if v == value
      return true

var from_iter = func(iter)
  save ret = table
  var idx = 0
  for i in iter
    ret[idx] = i
    idx = idx + 1

var slice = func(self, start, end)
  save ret = table
  var to_idx = 0
  var from_idx = start
  while from_idx < end
    ret[to_idx] = self[from_idx]
    from_idx = from_idx + 1
    to_idx = to_idx + 1

var join = func(self, sep)
  save ret = ""
  var i = 0
  while self[i] != null
    ret = ret $ tostr(self[i])
    i = i + 1
    if self[i] != null
      ret = ret $ sep

var str = func(self)
  return "[" $ join(self, ", ") $ "]"

var from_iter = func(iter)
  var i = 0
  save ret = []

  loop
    ret[i] = iter()
    break if ret[i] == null
    i = i + 1

var shallow_compare = func(l, r)
  save true

  if length(l) != length(r)
    return false

  var i = 0
  var len = length(l)
  while i < len
    if l[i] != r[i]
      return false
    i = i + 1

exports = table {
  length = length,
  values = values,
  keys = keys,
  items = items,
  map = map,
  foldl = foldl,
  concat = concat,
  flatmap = flatmap,
  contains = contains,
  from_iter = from_iter,
  slice = slice,
  str = str,
  join = join,
  from_iter = from_iter,
  shallow_compare = shallow_compare,
}
