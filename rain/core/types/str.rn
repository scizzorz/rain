link "./str.c"

export bool = foreign "rain_ext_truthy"(self)
export float = foreign "rain_ext_str_float"(self)
export int = foreign "rain_ext_str_int"(self)
export str = func(self) -> self

export length = foreign "rain_ext_str_length"(val)

export substring = func(s, start, end)
  var len = length(s)
  if start >= end | end > len
    return ""
  return s[start] $ substring(s, start+1, end)

export get = foreign "rain_ext_str_char_at"(val, key)

export index_of = func(s, of)
  var i = 0
  var len = length(s)
  while i < len
    if s[i] == of
      return i
    i = i + 1

export stripl = func(s)
  var start = 0

  var i = 0
  var len = length(s)
  while i < len
    break if !(s[i] == " " | s[i] == "\n" | s[i] == "\t")
    start = start + 1
    i = i + 1
  return substring(s, start, length(s))

export split = func(s, at)
  var arr = table
  var arr_idx = 0
  var recurse = func(s)
    bind arr, arr_idx, at, recurse
    if s == null | s == ""
      return
    var i = index_of(s, at)
    if i != null
      var cur = substring(s, 0, i)
      var rest = substring(s, i+1, length(s))
      arr[arr_idx] = cur
      arr_idx = arr_idx + 1
      recurse(rest)
    else
      arr[arr_idx] = s
  recurse(s)
  return arr

export fmt = foreign "rain_ext_str_fmt"(self, args)

export str_fmt_error = table :: except.error
str_fmt_error.msg = "invalid format string"
foreign "rain_exc_str_fmt_error" = str_fmt_error
