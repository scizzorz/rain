import unit
import types/array
import iter
import ops

export main = func()
  @unit.init

  @unit.group replication
    array.shallow_compare(array.from_iter(iter.replicate(3, null)), [])
    array.shallow_compare(array.from_iter(iter.replicate(3, 1)), [1,1,1])
    array.shallow_compare(array.from_iter(iter.replicate(7, 2)), [2,2,2,2,2,2,2])

  var test_1 = func(x)
    return 1 == x

  var bool_to_success = func(x)
    if x
      return true

  var compose = func(f, g)
    return func(x) -> f(g(x))

  @unit.group map_and_filter
    array.shallow_compare(
      array.from_iter(iter.filter(([1,2,3,1,2,1]):values(), test_1)),
      [1,1,1])
    array.shallow_compare(
      array.from_iter(iter.filter(([1,2,3,1,2,1]):values(), compose(ops.not, test_1))),
      [2,3,2])
    array.shallow_compare(
      array.from_iter(iter.map_success(([1,2,3,1,2,1]):values(), compose(bool_to_success, test_1))),
      [true,true,true])
    array.shallow_compare(
      array.from_iter(iter.map_success(([1,2,3,1,2,1]):values(), test_1)),
      [true, false, false, true, false, true])


  var mk_t = {x=0}
  var mk = func()
    mk_t.x = mk_t.x + 1
    return mk_t.x < 10 & true | null


  iter.force(mk)

  @unit.group forcing
    mk_t.x == 10

  @unit.report
